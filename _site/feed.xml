<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-22T03:05:28+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SHIHAO ZHAO</title><author><name>Shihao Zhao</name></author><entry><title type="html">Resume</title><link href="http://localhost:4000/2023/03/21/resume/" rel="alternate" type="text/html" title="Resume" /><published>2023-03-21T00:00:00+08:00</published><updated>2023-03-21T00:00:00+08:00</updated><id>http://localhost:4000/2023/03/21/resume</id><content type="html" xml:base="http://localhost:4000/2023/03/21/resume/">&lt;h1 id=&quot;shihao-zhao&quot;&gt;&lt;strong&gt;Shihao Zhao&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Software developer, Computer Engineering Student&lt;/p&gt;

&lt;h2 id=&quot;education&quot;&gt;Education&lt;/h2&gt;

&lt;h3 id=&quot;mcmaster-university&quot;&gt;McMaster University&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bachelor of Engineering, Computer Engineering&lt;/strong&gt;  &lt;em&gt;Hamilton, Ontario, Canada&lt;/em&gt;
-&amp;gt; &lt;em&gt;2015-2020&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;work-experience&quot;&gt;Work Experience&lt;/h2&gt;

&lt;h3 id=&quot;varicent&quot;&gt;Varicent&lt;/h3&gt;
&lt;p&gt;-&amp;gt;&lt;em&gt;North York, Ontario, Canada&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Associate QA Analyst&lt;/strong&gt;
-&amp;gt; &lt;em&gt;Oct 2021 to Aug 2022&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Programed and debugged automation test using Cypress to reduce 20% manual test time.&lt;/li&gt;
  &lt;li&gt;Collaborated with dev teams to locate and fix major bugs, resulting in the delivery of features 2 days before deadline and improving team efficiency by 15%&lt;/li&gt;
  &lt;li&gt;Organized daily tasks using Jira, ensuring timely completion of project milestones&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;braingrid-corporation&quot;&gt;Braingrid Corporation&lt;/h3&gt;
&lt;p&gt;-&amp;gt;&lt;em&gt;North York, Ontario, Canada&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firmware Developer Intern&lt;/strong&gt;
-&amp;gt; &lt;em&gt;Sep 2018 to May 2019&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Programed and debugged to add new feature on company’s product using I2C protocol in C&lt;/li&gt;
  &lt;li&gt;Maintained codes and unit test monthly, fixing approximately 50 bugs&lt;/li&gt;
  &lt;li&gt;Analyzed feedback on software effectiveness from clients and produced performance report, enhancing the user experience and increasing client orders by 100&lt;/li&gt;
  &lt;li&gt;Monitored clients’ data in AWS and helped display accurate data on company website&lt;/li&gt;
  &lt;li&gt;Collaborated with team members to complete calibration and unit test of 300 products and labeled the products based on the data collected from the tests&lt;/li&gt;
  &lt;li&gt;Maintained and updated training documents for interns, reducing training time by 20%&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;skills&quot;&gt;Skills&lt;/h2&gt;

&lt;p&gt;Technical: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git/GitHub&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyBaits&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Management: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jira&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scrum&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Agile&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Shihao Zhao</name></author><category term="Resume" /><summary type="html">Shihao Zhao Software developer, Computer Engineering Student</summary></entry><entry><title type="html">数组Array</title><link href="http://localhost:4000/2022/01/01/array/" rel="alternate" type="text/html" title="数组Array" /><published>2022-01-01T00:00:00+08:00</published><updated>2022-01-01T00:00:00+08:00</updated><id>http://localhost:4000/2022/01/01/array</id><content type="html" xml:base="http://localhost:4000/2022/01/01/array/">&lt;p&gt;#&lt;strong&gt;数组array&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##数组特点
1.是相同类型的变量的集合，所有元素类型都一样（例子：都是int）&lt;br /&gt;
2.可以指定数组包含的个数，最多为int的最大值个&lt;br /&gt;
3.元素有固定的顺序&lt;/p&gt;

&lt;p&gt;##创建和使用一个数组的语法
数组元素类型[] 变量名 = new 数组元素类型[数组长度]&lt;br /&gt;
变量名[索引] 使用&lt;/p&gt;

&lt;p&gt;return new 数组元素类型[]{,,};&lt;/p&gt;

&lt;p&gt;获取数组长度&lt;br /&gt;
变量名.length&lt;/p&gt;</content><author><name>Shihao Zhao</name></author><category term="DataStructure" /><summary type="html">#数组array</summary></entry><entry><title type="html">类class</title><link href="http://localhost:4000/2021/01/01/java-class/" rel="alternate" type="text/html" title="类class" /><published>2021-01-01T00:00:00+08:00</published><updated>2021-01-01T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/01/java-class</id><content type="html" xml:base="http://localhost:4000/2021/01/01/java-class/">&lt;h2 id=&quot;类class&quot;&gt;#类class&lt;/h2&gt;
&lt;p&gt;一个模板，描述一类对象的行为和属性&lt;/p&gt;

&lt;p&gt;###成员变量
定义在类之中，方法之外
###局部变量
在方法，构造方法或者语句块中定义的变量
###类变量&lt;/p&gt;

&lt;h2 id=&quot;对象&quot;&gt;#对象&lt;/h2&gt;
&lt;p&gt;类名 对象名 = new 类名(“实例化”);&lt;/p&gt;</content><author><name>Shihao Zhao</name></author><category term="Java" /><summary type="html">#类class 一个模板，描述一类对象的行为和属性</summary></entry><entry><title type="html">MySQL InnoDB数据页结构(Page Structure)</title><link href="http://localhost:4000/2020/07/25/mysql-innodb-page/" rel="alternate" type="text/html" title="MySQL InnoDB数据页结构(Page Structure)" /><published>2020-07-25T00:00:00+08:00</published><updated>2020-07-25T00:00:00+08:00</updated><id>http://localhost:4000/2020/07/25/mysql-innodb-page</id><content type="html" xml:base="http://localhost:4000/2020/07/25/mysql-innodb-page/">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;页&lt;/code&gt;是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;管理存储空间的基本单位，一般一个页的大小是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16KB&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;为了实现不同的目的而设计了许多页，比如存放表空间头部信息的页，存放&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insert Buffer&lt;/code&gt;信息的页等等。存放我们表中记录的页是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;索引页（index page）&lt;/code&gt;，鉴于我们还没有了解过索引是个什么东西，而这些表中的记录就是我们日常口中所称的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;数据&lt;/code&gt;，所以目前还是叫这种存放记录的页为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;数据页&lt;/code&gt;吧。&lt;/p&gt;

&lt;h1 id=&quot;1-数据页结构的快速浏览&quot;&gt;1. 数据页结构的快速浏览&lt;/h1&gt;

&lt;p&gt;数据页代表的这块&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16KB&lt;/code&gt;大小的存储空间可以被划分为多个部分，不同部分有不同的功能，各个部分如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_10.PNG&quot; alt=&quot;mysql10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从图中可以看出，一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;数据页的存储空间大致被划分成了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt;个部分，有的部分占用的字节数是确定的，有的部分占用的字节数是不确定的。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-记录在页中的存储&quot;&gt;2. 记录在页中的存储&lt;/h1&gt;

&lt;p&gt;在上图的7个部分中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Records&lt;/code&gt;部分是存储记录的。其实，一开始是没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Records&lt;/code&gt;这部分的，每当我们插入一条记录，都会从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Free Space&lt;/code&gt;部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Records&lt;/code&gt;部分，当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Free Space&lt;/code&gt;部分的空间全部被&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Records&lt;/code&gt;部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_11.png&quot; alt=&quot;mysql11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;管理&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Records&lt;/code&gt;是很复杂的过程，并不是把记录直接放在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Records&lt;/code&gt;部分就完成了。我们先从记录头信息来理解这个过程。&lt;/p&gt;

&lt;h2 id=&quot;21-记录头信息&quot;&gt;2.1 记录头信息&lt;/h2&gt;

&lt;p&gt;先建一个表：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROW_FORMAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个新创建的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page_demo&lt;/code&gt;表有3个列，其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c2&lt;/code&gt;列是用来存储整数的，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c3&lt;/code&gt;列是用来存储字符串的。需要注意的是，我们把 &lt;strong&gt;&lt;em&gt;c1&lt;/em&gt;&lt;/strong&gt; 列指定为主键，所以在具体的行格式中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;就没必要为我们去创建那个所谓的 &lt;strong&gt;&lt;em&gt;row_id&lt;/em&gt;&lt;/strong&gt; 隐藏列了。而且我们为这个表指定了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ascii&lt;/code&gt;字符集以及&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact&lt;/code&gt;的行格式。所以这个表中记录的行格式示意图就是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_12.png&quot; alt=&quot;mysql12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;记录头中的属性如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;大小（单位：bit）&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;预留位1&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;没有使用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;预留位2&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;没有使用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete_mask&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;标记该记录是否被删除&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_rec_mask&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B+树的每层非叶子节点中的最小记录都会添加该标记&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_owned&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表示当前记录拥有的记录数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heap_no&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;13&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表示当前记录在记录堆的位置信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_type&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表示当前记录的类型，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;表示普通记录，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;表示B+树非叶节点记录，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;表示最小记录，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;表示最大记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_record&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表示下一条记录的相对位置&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_13.png&quot; alt=&quot;mysql13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们向&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page_demo&lt;/code&gt;表中插入几条记录：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_demo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;aaaa&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;bbbb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;cccc&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;dddd&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了方便大家分析这些记录在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;页&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Records&lt;/code&gt;部分中是怎么表示的，我把记录中头信息和实际的列数据都用十进制表示出来了（其实是一堆二进制位），所以这些记录的示意图就是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_14.png&quot; alt=&quot;mysql14&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete_mask&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;这个属性标记着当前记录是否被删除，占用1个二进制位，值为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;的时候代表记录并没有被删除，为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;的时候代表记录被删除掉了。这些被删除的记录之所以不立即从磁盘上移除，是因为移除它们之后把其他的记录在磁盘上重新排列需要性能消耗，所以只是打一个删除标记而已，所有被删除掉的记录都会组成一个所谓的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;垃圾链表&lt;/code&gt;，在这个链表中的记录占用的空间称之为所谓的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;可重用空间&lt;/code&gt;，之后如果有新记录插入到表中的话，可能把这些被删除的记录占用的存储空间覆盖掉。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_rec_mask&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;B+树的每层非叶子节点中的最小记录都会添加该标记。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_owned&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;稍后介绍&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heap_no&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;这个属性表示当前记录在本&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;页&lt;/code&gt;中的位置，从图中可以看出来，我们插入的4条记录在本&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;页&lt;/code&gt;中的位置分别是：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;的记录并不是我们自己插入的，所以有时候也称为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;伪记录&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;虚拟记录&lt;/code&gt;。这两个伪记录一个代表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最小记录&lt;/code&gt;，一个代表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最大记录&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;实际上，记录也是可以比较大小的，对于一条完整的记录来说，比较记录的大小就是比较&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;主键&lt;/code&gt;的大小。比方说我们插入的4行记录的主键值分别是：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;，这也就意味着这4条记录的大小从小到大依次递增。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是不管我们向&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;页&lt;/code&gt;中插入了多少自己的记录，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;都规定两条伪记录分别为最小记录与最大记录。这两条记录的构造十分简单，都是由5字节大小的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录头信息&lt;/code&gt;和8字节大小的一个固定的部分组成的。&lt;/p&gt;

&lt;p&gt;由于这两条记录不是我们自己定义的记录，所以它们并不存放在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;页&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Records&lt;/code&gt;部分，他们被单独放在一个称为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Infimum + Supremum&lt;/code&gt;的部分，如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_15.png&quot; alt=&quot;mysql15&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_type&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;这个属性表示当前记录的类型，一共有4种类型的记录，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;表示普通记录，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;表示B+树非叶节点记录，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;表示最小记录，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;表示最大记录。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_record&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考文章：&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shihao Zhao</name></author><category term="MySQL" /><summary type="html">页是InnoDB管理存储空间的基本单位，一般一个页的大小是16KB。InnoDB为了实现不同的目的而设计了许多页，比如存放表空间头部信息的页，存放Insert Buffer信息的页等等。存放我们表中记录的页是索引页（index page），鉴于我们还没有了解过索引是个什么东西，而这些表中的记录就是我们日常口中所称的数据，所以目前还是叫这种存放记录的页为数据页吧。</summary></entry><entry><title type="html">MySQL InnoDB记录结构(Record Structure)</title><link href="http://localhost:4000/2020/07/02/mysql-innodb/" rel="alternate" type="text/html" title="MySQL InnoDB记录结构(Record Structure)" /><published>2020-07-02T00:00:00+08:00</published><updated>2020-07-02T00:00:00+08:00</updated><id>http://localhost:4000/2020/07/02/mysql-innodb</id><content type="html" xml:base="http://localhost:4000/2020/07/02/mysql-innodb/">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器上负责对表中数据的读取和写入工作的部分是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;存储引擎&lt;/code&gt;，而服务器又支持不同类型的存储引擎，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyISAM&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Memory&lt;/code&gt;，不同的存储引擎一般是由不同的人为实现不同的特性而开发的，真实数据在不同存储引擎中存放的格式一般是不同的，甚至有的存储引擎比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Memory&lt;/code&gt;都不用磁盘来存储数据，也就是说关闭服务器后表中的数据就消失了。&lt;/p&gt;

&lt;h1 id=&quot;1--innodb页简介&quot;&gt;1.  InnoDB页简介&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;是一个将表中的数据存储到磁盘上的存储引擎，所以即使关机后重启我们的数据还是存在的。而真正处理数据的过程是发生在内存中的，所以需要把磁盘中的数据加载到内存中，如果是处理写入或修改请求的话，还需要把内存中的内容刷新到磁盘上。而我们知道读写磁盘的速度非常慢，和内存读写差了几个数量级，所以当我们想从表中获取某些记录时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;存储引擎需要一条一条的把记录从磁盘上读出来么？不，那样会慢死，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小一般为16KB。也就是在一般情况下，一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB内容刷新到磁盘中。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-innodb行格式&quot;&gt;2. InnoDB行格式&lt;/h1&gt;

&lt;p&gt;我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;行格式&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录格式&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;存储引擎有4种不同类型的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;行格式&lt;/code&gt;，分别是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redundant&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compressed&lt;/code&gt;行格式。&lt;/p&gt;

&lt;h2 id=&quot;21-指定行格式的语法&quot;&gt;2.1 指定行格式的语法&lt;/h2&gt;

&lt;p&gt;我们可以在创建或修改表的语句中指定&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;行格式&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称
    
ALTER TABLE 表名 ROW_FORMAT=行格式名称
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;22-compact行格式&quot;&gt;2.2 COMPACT行格式&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_2.png&quot; alt=&quot;mysql2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一条完整的记录其实可以被分为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录的额外信息&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录的真实数据&lt;/code&gt;两大部分。&lt;/p&gt;

&lt;h3 id=&quot;221-记录的额外信息&quot;&gt;2.2.1 记录的额外信息&lt;/h3&gt;

&lt;p&gt;这部分信息是服务器为了描述这条记录而不得不额外添加的一些信息，这些额外信息分为3类，分别是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;变长字段长度列表&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL值列表&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录头信息&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变长字段长度列表&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们知道&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;支持一些变长的数据类型，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VARCHAR(M)&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VARBINARY(M)&lt;/code&gt;、各种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEXT&lt;/code&gt;类型，各种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLOB&lt;/code&gt;类型，我们也可以把拥有这些数据类型的列称为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;变长字段&lt;/code&gt;，变长字段中存储多少字节的数据是不固定的，所以我们在存储真实数据的时候需要顺便把这些数据占用的字节数也存起来，这样才不至于把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器搞懵，所以这些变长字段占用的存储空间分为两部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;真正的数据内容&lt;/li&gt;
  &lt;li&gt;占用的字节数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact&lt;/code&gt;行格式中，把所有变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，各变长字段数据占用的字节数按照列的顺序逆序存放。&lt;/p&gt;

&lt;p&gt;我们拿&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_format_demo&lt;/code&gt;表中的第一条记录来举个例子。因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_format_demo&lt;/code&gt;表的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c2&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c4&lt;/code&gt;列都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VARCHAR(10)&lt;/code&gt;类型的，也就是变长的数据类型，所以这三个列的值的长度都需要保存在记录开头处，因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_format_demo&lt;/code&gt;表中的各个列都使用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ascii&lt;/code&gt;字符集，所以每个字符只需要1个字节来进行编码，来看一下第一条记录各变长字段内容的长度：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;列名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;存储内容&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;内容长度（十进制表示）&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;内容长度（十六进制表示）&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;aaaa&apos;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x04&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c2&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;bbb&apos;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x03&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c4&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;d&apos;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x01&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;又因为这些长度值需要按照列的逆序存放，所以最后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;变长字段长度列表&lt;/code&gt;的字节串用十六进制表示的效果就是（各个字节之间实际上没有空格，用空格隔开只是方便理解）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01 03 04 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把这个字节串组成的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;变长字段长度列表&lt;/code&gt;填入上边的示意图中的效果就是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_3.png&quot; alt=&quot;mysql3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于第一行记录中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c2&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c4&lt;/code&gt;列中的字符串都比较短，也就是说内容占用的字节数比较小，用1个字节就可以表示，但是如果变长列的内容占用的字节数比较多，可能就需要用2个字节来表示。具体用1个还是2个字节来表示真实数据占用的字节数，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;有它的一套规则。&lt;/p&gt;

&lt;p&gt;另外需要注意的一点是，变长字段长度列表中只存储值为 &lt;strong&gt;&lt;em&gt;非NULL&lt;/em&gt;&lt;/strong&gt; 的列内容占用的长度，值为 &lt;strong&gt;&lt;em&gt;NULL&lt;/em&gt;&lt;/strong&gt; 的列的长度是不储存的 。也就是说对于一条记录来说，如果c4&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;列的值为&lt;/code&gt;NULL，则变长字段长度列表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;只需要存储&lt;/code&gt;c1&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;和&lt;/code&gt;c2&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;列的长度即可。其中&lt;/code&gt;c1&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;列存储的值为&lt;/code&gt;‘eeee’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;，占用的字节数为&lt;/code&gt;4&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;，&lt;/code&gt;c2&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;列存储的值为&lt;/code&gt;‘fff’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;，占用的字节数为&lt;/code&gt;3&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;。数字&lt;/code&gt;4&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;可以用1个字节表示，&lt;/code&gt;3&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;也可以用1个字节表示，所以整个&lt;/code&gt;变长字段长度列表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;共需2个字节。填充完&lt;/code&gt;变长字段长度列表`的两条记录的对比图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_4.png&quot; alt=&quot;mysql4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NULL值列表&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们知道表中的某些列可能存储&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;值，如果把这些&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;值都放到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录的真实数据&lt;/code&gt;中存储会很占地方，所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact&lt;/code&gt;行格式把这些值为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;的列统一管理起来，存储到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;值列表中，它的处理过程是这样的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先统计表中允许存储&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;的列有哪些。&lt;/p&gt;

    &lt;p&gt;我们前边说过，主键列、被&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;修饰的列都是不可以存储&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;值的，所以在统计的时候不会把这些列算进去。比方说表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_format_demo&lt;/code&gt;的3个列&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c3&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c4&lt;/code&gt;都是允许存储&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;值的，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c2&lt;/code&gt;列是被&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;修饰，不允许存储&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果表中没有允许存储 &lt;strong&gt;&lt;em&gt;NULL&lt;/em&gt;&lt;/strong&gt; 的列，则 &lt;em&gt;NULL值列表&lt;/em&gt; 也不存在了，否则将每个允许存储&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;的列对应一个二进制位，二进制位按照列的顺序逆序排列，二进制位表示的意义如下：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;二进制位的值为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;时，代表该列的值为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;。&lt;/li&gt;
      &lt;li&gt;二进制位的值为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;时，代表该列的值不为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;因为表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_format_demo&lt;/code&gt;有3个值允许为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;的列，所以这3个列和二进制位的对应关系就是这样：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_5.png&quot; alt=&quot;mysql5&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;二进制位按照列的顺序逆序排列，所以第一个列&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1&lt;/code&gt;和最后一个二进制位对应。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;规定&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL值列表&lt;/code&gt;必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_format_demo&lt;/code&gt;只有3个值允许为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;的列，对应3个二进制位，不足一个字节，所以在字节的高位补&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;，效果就是这样：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_6.png&quot; alt=&quot;mysql6&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;以此类推，如果一个表中有9个允许为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;，那这个记录的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;值列表部分就需要2个字节来表示了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;记录头信息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;除了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;变长字段长度列表&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL值列表&lt;/code&gt;之外，还有一个用于描述记录的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录头信息&lt;/code&gt;，它是由固定的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;个字节组成。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;个字节也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40&lt;/code&gt;个二进制位，不同的位代表不同的意思，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_7.png&quot; alt=&quot;mysql7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;记录的真实数据&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_format_demo&lt;/code&gt;表来说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录的真实数据&lt;/code&gt;除了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c2&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c3&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c4&lt;/code&gt;这几个我们自己定义的列的数据以外，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;会为每个记录默认的添加一些列（也称为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;隐藏列&lt;/code&gt;），具体的列如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;列名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;是否必须&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;占用空间&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;row_id&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;否&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;字节&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;行ID，唯一标识一条记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transaction_id&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;字节&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;事务ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll_pointer&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt;字节&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;回滚指针&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里需要提一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;表对主键的生成策略：优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unique&lt;/code&gt;键作为主键，如果表中连&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unique&lt;/code&gt;键都没有定义的话，则&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;会为表默认添加一个名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;row_id&lt;/code&gt;的隐藏列作为主键。所以我们从上表中可以看出：InnoDB存储引擎会为每条记录都添加 &lt;strong&gt;&lt;em&gt;transaction_id&lt;/em&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;em&gt;roll_pointer&lt;/em&gt;&lt;/strong&gt; 这两个列，但是 &lt;strong&gt;&lt;em&gt;row_id&lt;/em&gt;&lt;/strong&gt; 是可选的（在没有自定义主键以及Unique键的情况下才会添加该列）。这些隐藏列的值不用我们操心，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;存储引擎会自己帮我们生成的。&lt;/p&gt;

&lt;p&gt;因为表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record_format_demo&lt;/code&gt;并没有定义主键，所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器会为每条记录增加上述的3个列。现在看一下加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;记录的真实数据&lt;/code&gt;的两个记录长什么样吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_8.png&quot; alt=&quot;mysql8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CHAR(M)列的存储格式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于 &lt;strong&gt;&lt;em&gt;CHAR(M)&lt;/em&gt;&lt;/strong&gt; 类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;23-redundant行格式&quot;&gt;2.3 Redundant行格式&lt;/h2&gt;

&lt;p&gt;一种古老的格式，这里就不介绍了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;24-dynamic和compressed行格式&quot;&gt;2.4 Dynamic和Compressed行格式&lt;/h2&gt;

&lt;p&gt;下边要介绍另外两个行格式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compressed&lt;/code&gt;行格式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;版本&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5.7&lt;/code&gt;，它的默认行格式就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic&lt;/code&gt;，这俩行格式和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact&lt;/code&gt;行格式挺像，只不过在处理&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;行溢出&lt;/code&gt;数据时有点儿分歧，它们不会在记录的真实数据处存储字段真实数据的前&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;768&lt;/code&gt;个字节，而是把所有的字节都存储到其他页面中，只在记录的真实数据处存储其他页面的地址，就像这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_9.png&quot; alt=&quot;mysql9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compressed&lt;/code&gt;行格式和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic&lt;/code&gt;不同的一点是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compressed&lt;/code&gt;行格式会采用压缩算法对页面进行压缩，以节省空间。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考文章：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.im/book/5bffcbc9f265da614b11b731&quot;&gt;MySQL 是怎样运行的：从根儿上理解 MySQL&lt;/a&gt;&lt;/p&gt;</content><author><name>Shihao Zhao</name></author><category term="MySQL" /><summary type="html">MySQL服务器上负责对表中数据的读取和写入工作的部分是存储引擎，而服务器又支持不同类型的存储引擎，比如InnoDB、MyISAM、Memory，不同的存储引擎一般是由不同的人为实现不同的特性而开发的，真实数据在不同存储引擎中存放的格式一般是不同的，甚至有的存储引擎比如Memory都不用磁盘来存储数据，也就是说关闭服务器后表中的数据就消失了。</summary></entry><entry><title type="html">MySQL字符集(Charset)</title><link href="http://localhost:4000/2020/07/01/mysql-charset/" rel="alternate" type="text/html" title="MySQL字符集(Charset)" /><published>2020-07-01T00:00:00+08:00</published><updated>2020-07-01T00:00:00+08:00</updated><id>http://localhost:4000/2020/07/01/mysql-charset</id><content type="html" xml:base="http://localhost:4000/2020/07/01/mysql-charset/">&lt;p&gt;在计算机中，只能存储二进制数据，也就是0和1。那字符串改如何存储呢？我们就需要建立二进制数据和字符的映射关系。在建立映射关系的时候，我们要想清楚两件事：第一件事是哪些字符需要被映射成二进制数据，也就是界定清楚字符范围。第二件事是如何映射，将一个字符映射成一个二进制数据的过程也叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;编码&lt;/code&gt;，将一个二进制数据映射到一个字符的过程叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;解码&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;1-字符集和比较规则简介&quot;&gt;1. 字符集和比较规则简介&lt;/h1&gt;

&lt;p&gt;人们抽象出一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;字符集&lt;/code&gt;的概念来描述某个字符范围的编码规则。比如，我定义一个属于我自己的字符集，叫作&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;宇宙第一字符集&lt;/code&gt;，那么它包含的字符范围和编码规则如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;包含字符：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;a&apos;&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;b&apos;&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;c&apos;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编码规则如下：&lt;/p&gt;

    &lt;p&gt;采用1个字节编码一个字符的形式，字符和字节的映射关系如下：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos;a&apos; -&amp;gt; 00000001 (十六进制：0x01)
&apos;b&apos; -&amp;gt; 00000010 (十六进制：0x02)
&apos;c&apos; -&amp;gt; 00000011 (十六进制：0x03)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;宇宙第一字符集&lt;/code&gt;我们就可以用二进制形式表示一些字符串了。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos;ac&apos; -&amp;gt; 0000001000000011  (十六进制：0x0203)
&apos;df&apos; -&amp;gt; 无法表示，字符集不包含&apos;d&apos;和&apos;f&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;11-比较规则简介&quot;&gt;1.1 比较规则简介&lt;/h2&gt;

&lt;p&gt;在我们确定了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;宇宙第一字符集&lt;/code&gt;字符集表示字符的范围以及编码规则后，怎么比较两个字符的大小呢？最容易想到的就是直接比较这两个字符对应的二进制编码的大小，比方说字符&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;a&apos;&lt;/code&gt;的编码为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x01&lt;/code&gt;，字符&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;b&apos;&lt;/code&gt;的编码为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x02&lt;/code&gt;，所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;a&apos;&lt;/code&gt;小于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;b&apos;&lt;/code&gt;，这种简单的比较规则也可以被称为二进制比较规则，英文名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary collation&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但在一些特殊情况下，比如不区分大小写的情况，我们就不能这么简单地比较了，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;a&apos;&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;A&apos;&lt;/code&gt;是相等的。在这种情况下，我们可以把大写的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;A&apos;&lt;/code&gt;转为小写的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;a&apos;&lt;/code&gt;，再比较它们的二进制数据。&lt;/p&gt;

&lt;p&gt;实际生活中的字符不止英文字符一种，比如我们的汉字有几万之多，对于某一种字符集来说，比较两个字符大小的规则可以制定出很多种，也就是说同一种字符集可以有多种比较规则。&lt;/p&gt;

&lt;h2 id=&quot;12-常用字符集&quot;&gt;1.2 常用字符集&lt;/h2&gt;

&lt;p&gt;现有的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;字符集&lt;/code&gt;有很多种，常用的有如下几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;字符集&lt;/p&gt;

    &lt;p&gt;共收录128个字符，包括空格、标点符号、数字、大小写字母和一些不可见字符。由于总共才128个字符，所以可以使用1个字节来进行编码，我们看一些字符的编码方式：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos;L&apos; -&amp;gt;  01001100（十六进制：0x4C，十进制：76）
&apos;M&apos; -&amp;gt;  01001101（十六进制：0x4D，十进制：77）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISO 8859-1&lt;/code&gt;字符集&lt;/p&gt;

    &lt;p&gt;共收录256个字符，是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;字符集的基础上又扩充了128个西欧常用字符(包括德法两国的字母)，也可以使用1个字节来进行编码。这个字符集也有一个别名&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latin1&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GB2312&lt;/code&gt;字符集&lt;/p&gt;

    &lt;p&gt;收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;字符集，所以在编码方式上显得有些奇怪：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果该字符在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;字符集中，则采用1字节编码。&lt;/li&gt;
      &lt;li&gt;否则采用2字节编码。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;这种表示一个字符需要的字节数可能不同的编码方式称为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;变长编码方式&lt;/code&gt;。比方说字符串&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;爱u&apos;&lt;/code&gt;，其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;爱&apos;&lt;/code&gt;需要用2个字节进行编码，编码后的十六进制表示为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xB0AE&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;u&apos;&lt;/code&gt;需要用1个字节进行编码，编码后的十六进制表示为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x75&lt;/code&gt;，所以拼合起来就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xB0AE75&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GBK&lt;/code&gt;字符集&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GBK&lt;/code&gt;字符集只是在收录字符范围上对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GB2312&lt;/code&gt;字符集作了扩充，编码方式上兼容&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GB2312&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;字符集&lt;/p&gt;

    &lt;p&gt;收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;字符集，采用变长编码方式，编码一个字符需要使用1～4个字节，比方说这样：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos;L&apos; -&amp;gt;  01001100（十六进制：0x4C）
&apos;啊&apos; -&amp;gt;  111001011001010110001010（十六进制：0xE5958A）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于同一个字符，不同字符集也可能有不同的编码方式。比如对于汉字&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;我&apos;&lt;/code&gt;来说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;字符集中根本没有收录这个字符，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gb2312&lt;/code&gt;字符集对汉字&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;我&lt;/code&gt;的编码方式如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;utf8编码：111001101000100010010001 (3个字节，十六进制表示是：0xE68891)
gb2312编码：1011000010101110 (2个字节，十六进制表示是：0xB0AE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-mysql中支持的字符集和排序规则&quot;&gt;2. MySQL中支持的字符集和排序规则&lt;/h1&gt;

&lt;h2 id=&quot;21-mysql中的utf8和utf8mb4&quot;&gt;2.1 MySQL中的utf8和utf8mb4&lt;/h2&gt;

&lt;p&gt;我们上边说&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;字符集表示一个字符需要使用1～4个字节，但是我们常用的一些字符使用1～3个字节就可以表示了。而在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;中字符集表示一个字符所用最大字节长度在某些方面会影响系统的存储和性能，所以设计&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;的大叔偷偷的定义了两个概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8mb3&lt;/code&gt;：阉割过的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;字符集，只使用1～3个字节表示字符。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8mb4&lt;/code&gt;：正宗的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;字符集，使用1～4个字节表示字符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有一点需要大家十分的注意，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8mb3&lt;/code&gt;的别名，所以之后在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;中提到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;就意味着使用1~3个字节来表示一个字符，如果大家有使用4字节编码一个字符的情况，比如存储一些emoji表情啥的，那请使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8mb4&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;22-mysql比较规则的查看&quot;&gt;2.2 MySQL比较规则的查看&lt;/h2&gt;

&lt;p&gt;查看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;中支持的比较规则的命令如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SHOW COLLATION [LIKE 匹配的模式];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每种字符集对应若干种比较规则，每种字符集都有一种默认的比较规则，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW COLLATION&lt;/code&gt;的返回结果中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Default&lt;/code&gt;列的值为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YES&lt;/code&gt;的就是该字符集的默认比较规则，比方说&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;字符集默认的比较规则就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8_general_ci&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-字符集和比较规则的应用&quot;&gt;3. 字符集和比较规则的应用&lt;/h1&gt;

&lt;h2 id=&quot;31-各级别的字符集和比较规则&quot;&gt;3.1 各级别的字符集和比较规则&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;有4个级别的字符集和比较规则，分别是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;服务器级别&lt;/li&gt;
  &lt;li&gt;数据库级别&lt;/li&gt;
  &lt;li&gt;表级别&lt;/li&gt;
  &lt;li&gt;列级别&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;311-服务器级别&quot;&gt;3.1.1 服务器级别&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;提供了两个系统变量来表示服务器级别的字符集和比较规则：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;系统变量&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;character_set_server&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;服务器级别的字符集&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collation_server&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;服务器级别的比较规则&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们可以使用以下语句查看使用的字符集和比较规则：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SHOW VARIABLES LIKE &apos;character_set_server&apos;;
SHOW VARIABLES LIKE &apos;collation_server&apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;312-数据库级别&quot;&gt;3.1.2 数据库级别&lt;/h3&gt;

&lt;p&gt;我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE 数据库名
    [[DEFAULT] CHARACTER SET 字符集名称]
    [[DEFAULT] COLLATE 比较规则名称];

ALTER DATABASE 数据库名
    [[DEFAULT] CHARACTER SET 字符集名称]
    [[DEFAULT] COLLATE 比较规则名称];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;313-表级别&quot;&gt;3.1.3 表级别&lt;/h3&gt;

&lt;p&gt;我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE 表名 (列的信息)
    [[DEFAULT] CHARACTER SET 字符集名称]
    [COLLATE 比较规则名称]]

ALTER TABLE 表名
    [[DEFAULT] CHARACTER SET 字符集名称]
    [COLLATE 比较规则名称]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;314-列级别&quot;&gt;3.1.4 列级别&lt;/h3&gt;

&lt;p&gt;需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE 表名(
    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],
    其他列...
);

ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。&lt;/p&gt;

&lt;h2 id=&quot;32-仅修改字符集或仅修改比较规则&quot;&gt;3.2 仅修改字符集或仅修改比较规则&lt;/h2&gt;

&lt;p&gt;由于字符集和比较规则是互相有联系的，如果我们只修改了字符集，比较规则也会跟着变化，如果只修改了比较规则，字符集也会跟着变化，具体规则如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只修改字符集，则比较规则将变为修改后的字符集默认的比较规则。&lt;/li&gt;
  &lt;li&gt;只修改比较规则，则字符集将变为修改后的比较规则对应的字符集。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不论哪个级别的字符集和比较规则，这两条规则都适用。&lt;/p&gt;

&lt;p&gt;我们介绍的这4个级别字符集和比较规则的联系如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则&lt;/li&gt;
  &lt;li&gt;如果创建或修改表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则&lt;/li&gt;
  &lt;li&gt;如果创建或修改数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规则&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-客户端和服务器通信中的字符集&quot;&gt;4. 客户端和服务器通信中的字符集&lt;/h1&gt;

&lt;h2 id=&quot;41-编码和解码使用的字符集不一致的后果&quot;&gt;4.1 编码和解码使用的字符集不一致的后果&lt;/h2&gt;

&lt;p&gt;字符串在计算机上的体现就是一个字节串，如果你使用不同字符集去解码这个字节串，可能不会得到你想要的结果。&lt;/p&gt;

&lt;p&gt;我们知道字符&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;我&apos;&lt;/code&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;字符集编码下的字节串长这样：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xE68891&lt;/code&gt;，如果一个程序把这个字节串发送到另一个程序里，另一个程序用不同的字符集去解码这个字节串，假设使用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gbk&lt;/code&gt;字符集来解释这串字节，解码过程就是这样的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先看第一个字节&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xE6&lt;/code&gt;，它的值大于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7F&lt;/code&gt;（十进制：127），说明是两字节编码，继续读一字节后是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xE688&lt;/code&gt;，然后从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gbk&lt;/code&gt;编码表中查找字节为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xE688&lt;/code&gt;对应的字符，发现是字符&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;鎴&apos;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;继续读一个字节&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x91&lt;/code&gt;，它的值也大于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7F&lt;/code&gt;，再往后读一个字节发现木有了，所以这是半个字符。&lt;/li&gt;
  &lt;li&gt;所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xE68891&lt;/code&gt;被&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gbk&lt;/code&gt;字符集解释成一个字符&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;鎴&apos;&lt;/code&gt;和半个字符。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;假设用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iso-8859-1&lt;/code&gt;，也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latin1&lt;/code&gt;字符集去解释这串字节，解码过程如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先读第一个字节&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xE6&lt;/code&gt;，它对应的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latin1&lt;/code&gt;字符为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;æ&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;再读第二个字节&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x88&lt;/code&gt;，它对应的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latin1&lt;/code&gt;字符为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ˆ&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;再读第三个字节&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x91&lt;/code&gt;，它对应的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latin1&lt;/code&gt;字符为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;‘&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;所以整串字节&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xE68891&lt;/code&gt;被&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latin1&lt;/code&gt;字符集解释后的字符串就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;æˆ‘&apos;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可见，如果对于同一个字符串编码和解码使用的字符集不一样，会产生意想不到的结果，作为人类的我们看上去就像是产生了乱码一样。&lt;/p&gt;

&lt;h2 id=&quot;42-字符集转换的概念&quot;&gt;4.2 字符集转换的概念&lt;/h2&gt;

&lt;p&gt;如果接收&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xE68891&lt;/code&gt;这个字节串的程序按照&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;字符集进行解码，然后又把它按照&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gbk&lt;/code&gt;字符集进行编码，最后编码后的字节串就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xCED2&lt;/code&gt;，我们把这个过程称为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;字符集的转换&lt;/code&gt;，也就是字符串&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;我&apos;&lt;/code&gt;从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf8&lt;/code&gt;字符集转换为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gbk&lt;/code&gt;字符集。&lt;/p&gt;

&lt;h2 id=&quot;43-mysql中字符集的转换&quot;&gt;4.3 MySQL中字符集的转换&lt;/h2&gt;

&lt;p&gt;我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。这个字符串可不是使用一种字符集的编码方式一条道走到黑的，从发送请求到返回结果这个过程中伴随着多次字符集的转换。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考文章：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.im/book/5bffcbc9f265da614b11b731&quot;&gt;MySQL 是怎样运行的：从根儿上理解 MySQL&lt;/a&gt;&lt;/p&gt;</content><author><name>Shihao Zhao</name></author><category term="MySQL" /><summary type="html">在计算机中，只能存储二进制数据，也就是0和1。那字符串改如何存储呢？我们就需要建立二进制数据和字符的映射关系。在建立映射关系的时候，我们要想清楚两件事：第一件事是哪些字符需要被映射成二进制数据，也就是界定清楚字符范围。第二件事是如何映射，将一个字符映射成一个二进制数据的过程也叫做编码，将一个二进制数据映射到一个字符的过程叫做解码。</summary></entry><entry><title type="html">MySQL运行原理(Principle)</title><link href="http://localhost:4000/2020/06/30/mysql-principle/" rel="alternate" type="text/html" title="MySQL运行原理(Principle)" /><published>2020-06-30T00:00:00+08:00</published><updated>2020-06-30T00:00:00+08:00</updated><id>http://localhost:4000/2020/06/30/mysql-principle</id><content type="html" xml:base="http://localhost:4000/2020/06/30/mysql-principle/">&lt;p&gt;我们平时玩的网络游戏，比如DOTA和LOL等的运行方式和MySQL有相似之处。我们把游戏的客户端下载到电脑上，登录客户端开始游戏，每个人都有自己的账号和密码，通过客户端连接到游戏公司的服务端，服务端负责交换客户端发来的数据，并返回给客户端，从而我们能看到玩游戏的时候是不是能打中技能。&lt;/p&gt;

&lt;h1 id=&quot;1-mysql的客户端服务器架构&quot;&gt;1. MySQL的客户端／服务器架构&lt;/h1&gt;

&lt;p&gt;MySQL的原理与之类似，它的服务器程序直接负责维护我们的存储数据，而多个客户端可以通过不同的账号和密码与服务端程序建立连接，发送数据修改请求，从而操作和维护数据。&lt;/p&gt;

&lt;p&gt;我们日常使用MySQL的流程是这样的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;启动MySQL服务器程序。我用的Mac电脑可以在设置中启动MySQL服务。&lt;/li&gt;
  &lt;li&gt;启动&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;客户端程序并连接到服务器程序。在Mac中，有时是使用Terminal通过账号密码登录到客户端，与服务端建立连接。&lt;/li&gt;
  &lt;li&gt;在客户端程序中输入一些命令语句作为请求发送到服务器程序，服务器程序收到这些请求后，会根据请求的内容来操作具体的数据并向客户端返回操作结果。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;MySQL服务端程序和客户端程序都是计算机的进程，MySQL服务器程序的进程叫作&lt;strong&gt;MySQL数据库实例&lt;/strong&gt;，简称&lt;strong&gt;数据库实例&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;2-客户端与服务器连接的过程&quot;&gt;2. 客户端与服务器连接的过程&lt;/h1&gt;

&lt;p&gt;客户端程序和服务端程序本质上都是进程，所以客户端进程向服务端进程发送请求并得到回复的过程本质上是&lt;strong&gt;进程间通信的过程&lt;/strong&gt;。MySQL支持以下三种客户端和服务器进程的通信方式。&lt;/p&gt;

&lt;h2 id=&quot;21-tcpip&quot;&gt;2.1 TCP/IP&lt;/h2&gt;

&lt;p&gt;数据库服务器进程和客户端进程可能运行在不同的主机中，它们之间必须通过网络来进行通讯。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;采用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP&lt;/code&gt;作为服务器和客户端之间的网络通信协议。在网络环境下，每台计算机都有一个唯一的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP地址&lt;/code&gt;，如果某个进程有需要采用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP&lt;/code&gt;协议进行网络通信方面的需求，可以向操作系统申请一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;端口号&lt;/code&gt;，这是一个整数值，它的取值范围是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0~65535&lt;/code&gt;。这样在网络中的其他进程就可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP地址 + 端口号&lt;/code&gt;的方式来与这个进程连接，这样进程之间就可以通过网络进行通信了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器启动的时候会默认申请&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3306&lt;/code&gt;端口号，之后就在这个端口号上等待客户端进程进行连接，用书面一点的话来说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器会默认监听&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3306&lt;/code&gt;端口。&lt;/p&gt;

&lt;p&gt;如果客户端进程想要使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP/IP&lt;/code&gt;网络来连接到服务器进程，比如我们在使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt;来启动客户端程序时，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-h&lt;/code&gt;参数后必须跟随&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP地址&lt;/code&gt;来作为需要连接的服务器进程所在主机的主机名，如果客户端进程和服务器进程在一台计算机中的话，我们可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;来代表本机的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP地址&lt;/code&gt;。另外，如果服务器进程监听的端口号不是默认的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3306&lt;/code&gt;，我们也可以在使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt;启动客户端程序时使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-P&lt;/code&gt;参数（大写的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;，小写的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;是用来指定密码的）来指定需要连接到的端口号。比如我们现在已经在本机启动了服务器进程，监听的端口号为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3307&lt;/code&gt;，那我们启动客户端程序时可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql -h127.0.0.1 -uroot -P3307 -p
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;22-命名管道和共享内存&quot;&gt;2.2 命名管道和共享内存&lt;/h2&gt;

&lt;p&gt;对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows&lt;/code&gt;用户，客户端进程和服务器进程之间可以考虑使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;命名管道&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;共享内存&lt;/code&gt;进行通信。不过启用这些通信方式的时候需要在启动服务器程序和客户端程序时添加一些参数。&lt;/p&gt;

&lt;h2 id=&quot;23-unix域套接字文件&quot;&gt;2.3 Unix域套接字文件&lt;/h2&gt;

&lt;p&gt;如果我们的服务器进程和客户端进程都运行在同一台操作系统为类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unix&lt;/code&gt;的机器上的话，我们可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unix域套接字文件&lt;/code&gt;来进行进程间通信。如果我们在启动客户端程序的时候指定的主机名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt;，或者指定了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--protocol=socket&lt;/code&gt;的启动参数，那服务器程序和客户端程序之间就可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unix&lt;/code&gt;域套接字文件来进行通信了。&lt;/p&gt;

&lt;h1 id=&quot;3-服务器处理客户端请求&quot;&gt;3. 服务器处理客户端请求&lt;/h1&gt;

&lt;p&gt;无论客户端与服务端用何种方式通信，本质都是客户端进程向服务端进程发送一段&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;语句，服务器进程处理后再向客户端进程发送处理结果。客户端可以向服务器发送增删改查请求，以查询为例介绍下处理过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mysql/mysql_1.PNG&quot; alt=&quot;mysql_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从图中我们可以看出，服务器程序处理来自客户端的查询请求大致需要经过三部分，分别是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;连接管理&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;解析与优化&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;存储引擎&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;31-连接管理&quot;&gt;3.1 连接管理&lt;/h2&gt;

&lt;p&gt;每当有一个客户端进程连接到服务器进程时，服务器进程都会创建一个线程来专门处理与这个客户端的交互，当该客户端退出时会与服务器断开连接，服务器并不会立即把与该客户端交互的线程销毁掉，而是把它缓存起来，在另一个新的客户端再进行连接时，把这个缓存的线程分配给该新客户端。这样就起到了不频繁创建和销毁线程的效果，从而节省开销。&lt;/p&gt;

&lt;p&gt;在客户端程序发起连接的时候，需要携带主机信息、用户名、密码，服务器程序会对客户端程序提供的这些信息进行认证，如果认证失败，服务器程序会拒绝连接。另外，如果客户端程序和服务器程序不运行在一台计算机上，我们还可以采用使用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSL&lt;/code&gt;（安全套接字）的网络连接进行通信，来保证数据传输的安全性。&lt;/p&gt;

&lt;p&gt;当连接建立后，与该客户端关联的服务器线程会一直等待客户端发送过来的请求，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器接收到的请求只是一个文本消息，该文本消息还要经过各种处理。&lt;/p&gt;

&lt;h2 id=&quot;32-解析与优化&quot;&gt;3.2 解析与优化&lt;/h2&gt;

&lt;p&gt;服务器收到了请求之后，还要进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;查询缓存&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;语法解析&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;查询优化&lt;/code&gt;过程。&lt;/p&gt;

&lt;h3 id=&quot;321-查询缓存&quot;&gt;3.2.1 查询缓存&lt;/h3&gt;

&lt;p&gt;MySQL会把处理过的查询请求和结果缓存起来，如果下次有请求需要这些数据，就会直接从缓存里拿到结果返回出去，就不需要再重新查找一次了。这个查询缓存可以在不同客户端之间共享，也就是说如果客户端A刚刚查询了一个语句，而客户端B之后发送了同样的查询请求，那么客户端B的这次查询就可以直接使用查询缓存中的数据。&lt;/p&gt;

&lt;p&gt;但是，如果两个查询请求有任何字符上的不同，都会导致缓存不会命中。另外，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如mysql、information_schema、performance_schema数据库中的表，那这个请求就不会被缓存。以某些系统函数举例，可能同样的函数的两次调用会产生不一样的结果，比如函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOW&lt;/code&gt;，每次调用都会产生最新的当前时间，如果在一个查询请求中调用了这个函数，那即使查询请求的文本信息都一样，那不同时间的两次查询也应该得到不同的结果，如果在第一次查询时就缓存了，那第二次查询的时候直接使用第一次查询的结果就是错误的。&lt;/p&gt;

&lt;p&gt;不过既然是缓存，那就有它缓存失效的时候。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;的缓存系统会监测涉及到的每张表，只要该表的结构或者数据被修改，那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。&lt;/p&gt;

&lt;h3 id=&quot;322-语法解析&quot;&gt;3.2.2 语法解析&lt;/h3&gt;

&lt;p&gt;如果查询缓存没有命中，接下来就需要进入正式的查询阶段了。因为客户端程序发送过来的请求只是一段文本而已，所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器程序首先要对这段文本做分析，判断请求的语法是否正确，然后从文本中将要查询的表、各种查询条件都提取出来放到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器内部使用的一些数据结构上来。&lt;/p&gt;

&lt;h3 id=&quot;323-查询优化&quot;&gt;3.2.3 查询优化&lt;/h3&gt;

&lt;p&gt;语法解析之后，服务器程序获得到了需要的信息，例如表信息，行列信息等等。我们的原始&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;语句执行效率可能不高，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;的优化程序会对我们的语句做一些优化。优化的结果就是生成一个执行计划，这个执行计划表明了应该使用的索引，表之间的连接顺序等等。我们可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;语句来查看某个语句的执行计划。&lt;/p&gt;

&lt;h2 id=&quot;33-存储引擎&quot;&gt;3.3 存储引擎&lt;/h2&gt;

&lt;p&gt;截止到服务器程序完成了查询优化为止，还没有真正的去访问真实的数据表，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;服务器把数据的存储和提取操作都封装到了一个叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;存储引擎&lt;/code&gt;的模块里。我们知道&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;表&lt;/code&gt;是由一行一行的记录组成的，但这只是一个逻辑上的概念，物理上如何表示记录，怎么从表中读取数据，怎么把数据写入具体的物理存储器上，这都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;存储引擎&lt;/code&gt;负责的事情。为了实现不同的功能，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;提供了各式各样的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;存储引擎&lt;/code&gt;，不同&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;存储引擎&lt;/code&gt;管理的表具体的存储结构可能不同，采用的存取算法也可能不同。&lt;/p&gt;

&lt;p&gt;为了管理方便，人们把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;连接管理&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;查询缓存&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;语法解析&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;查询优化&lt;/code&gt;这些并不涉及真实数据存储的功能划分为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL server&lt;/code&gt;的功能，把真实存取数据的功能划分为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;存储引擎&lt;/code&gt;的功能。各种不同的存储引擎向上边的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL server&lt;/code&gt;层提供统一的调用接口（也就是存储引擎API），包含了几十个底层函数，像”读取索引第一条内容”、”读取索引下一条内容”、”插入记录”等等。&lt;/p&gt;

&lt;p&gt;所以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL server&lt;/code&gt;完成了查询优化后，只需按照生成的执行计划调用底层存储引擎提供的API，获取到数据后返回给客户端就好了。&lt;/p&gt;

&lt;h1 id=&quot;4-常用存储引擎&quot;&gt;4. 常用存储引擎&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;支持非常多种存储引擎&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;存储引擎&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARCHIVE&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用于数据存档（行被插入后不能再修改）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLACKHOLE&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;丢弃写操作，读操作会返回空内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在存储数据时，以逗号分隔各个数据项&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FEDERATED&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用来访问远程表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;具备外键支持功能的事务存储引擎&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;置于内存的表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MERGE&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用来管理多个MyISAM表构成的表集合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyISAM&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;主要的非事务处理存储引擎&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NDB&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;MySQL集群专用存储引擎&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们常用的引擎只有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyISAM&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考文章：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.im/book/5bffcbc9f265da614b11b731&quot;&gt;MySQL 是怎样运行的：从根儿上理解 MySQL&lt;/a&gt;&lt;/p&gt;</content><author><name>Shihao Zhao</name></author><category term="MySQL" /><summary type="html">我们平时玩的网络游戏，比如DOTA和LOL等的运行方式和MySQL有相似之处。我们把游戏的客户端下载到电脑上，登录客户端开始游戏，每个人都有自己的账号和密码，通过客户端连接到游戏公司的服务端，服务端负责交换客户端发来的数据，并返回给客户端，从而我们能看到玩游戏的时候是不是能打中技能。</summary></entry></feed>